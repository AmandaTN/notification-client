{"ast":null,"code":"const sum = array => {\n  let result = 0;\n  array.forEach(item => {\n    result += item;\n  });\n  return result;\n};\nconst UID = name => {\n  // I generate the UID from two parts here \n  // to ensure the random number provide enough bits.\n  let utf8Encode = new TextEncoder();\n  let firstPart = utf8Encode.encode(name);\n  let secondPart = Math.random() * 46656 | 0;\n  firstPart = sum(firstPart).toString();\n  secondPart = (\"000\" + secondPart.toString()).slice(-3);\n  return firstPart + secondPart;\n};\n_c = UID;\nexport default UID;\nvar _c;\n$RefreshReg$(_c, \"UID\");","map":{"version":3,"names":["sum","array","result","forEach","item","UID","name","utf8Encode","TextEncoder","firstPart","encode","secondPart","Math","random","toString","slice"],"sources":["/Users/amandatorresnu/Trabajo/Projects/notification-center/notification-client/src/util/UID.js"],"sourcesContent":["const sum = (array) => {\n    let result = 0;\n  \n    array.forEach(item => {\n      result += item;\n    });\n\n    return result;\n  }\n\nconst UID = (name) => {\n    // I generate the UID from two parts here \n    // to ensure the random number provide enough bits.\n    let utf8Encode = new TextEncoder();\n    let firstPart = utf8Encode.encode(name);\n    let secondPart = (Math.random() * 46656) | 0;\n    firstPart = (sum(firstPart).toString());\n    secondPart = (\"000\" + secondPart.toString()).slice(-3);\n    return firstPart + secondPart;\n};\n\n\nexport default UID;"],"mappings":"AAAA,MAAMA,GAAG,GAAIC,KAAK,IAAK;EACnB,IAAIC,MAAM,GAAG,CAAC;EAEdD,KAAK,CAACE,OAAO,CAACC,IAAI,IAAI;IACpBF,MAAM,IAAIE,IAAI;EAChB,CAAC,CAAC;EAEF,OAAOF,MAAM;AACf,CAAC;AAEH,MAAMG,GAAG,GAAIC,IAAI,IAAK;EAClB;EACA;EACA,IAAIC,UAAU,GAAG,IAAIC,WAAW,EAAE;EAClC,IAAIC,SAAS,GAAGF,UAAU,CAACG,MAAM,CAACJ,IAAI,CAAC;EACvC,IAAIK,UAAU,GAAIC,IAAI,CAACC,MAAM,EAAE,GAAG,KAAK,GAAI,CAAC;EAC5CJ,SAAS,GAAIT,GAAG,CAACS,SAAS,CAAC,CAACK,QAAQ,EAAG;EACvCH,UAAU,GAAG,CAAC,KAAK,GAAGA,UAAU,CAACG,QAAQ,EAAE,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EACtD,OAAON,SAAS,GAAGE,UAAU;AACjC,CAAC;AAAC,KATIN,GAAG;AAYT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}